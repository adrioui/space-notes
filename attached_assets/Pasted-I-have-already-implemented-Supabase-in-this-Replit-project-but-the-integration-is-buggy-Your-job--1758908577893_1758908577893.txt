I have already implemented Supabase in this Replit project, but the integration is buggy.

Your job is to:
1. **Analyze my current implementation** of Supabase (SSR, CSR, and middleware).
2. **Debug issues** with connection pooling, cookies, and session handling.
3. **Suggest and apply fixes** directly in the repo so the app runs reliably on Replit.
4. **Explain best practices** for environment variables (`DATABASE_URL`, `DIRECT_URL`, `NEXT_PUBLIC_SUPABASE_*`) and how to use them securely on Replit.
5. **Optimize** for performance and correctness (auth, middleware, database queries).
    

---

#### Context
- Using **Supabase with Next.js App Router**.
    
- Using `@supabase/ssr` helpers for server/client/middleware.
    
- Current project structure includes:
    
    - `utils/supabase/server.ts`
        
    - `utils/supabase/client.ts`
        
    - `utils/supabase/middleware.ts`
        
    - `page.tsx` for querying todos.
        

---

#### What I Want You to Implement

`.env.local`

```env
NEXT_PUBLIC_SUPABASE_URL=https://afkfhoouirxevtctzfnf.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFma2Zob291aXJ4ZXZ0Y3R6Zm5mIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg4OTcwNjcsImV4cCI6MjA3NDQ3MzA2N30.IK3-B3qTug6oH79AAE5n4hjM4nQsguAiVoKHvEDVt4Y
```

`page.tsx`

```tsx
import { createClient } from '@/utils/supabase/server'
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  const supabase = createClient(cookieStore)

  const { data: todos } = await supabase.from('todos').select()

  return (
    <ul>
      {todos?.map((todo) => (
        <li>{todo}</li>
      ))}
    </ul>
  )
}
```

`utils/supabase/server.ts`

```ts
import { createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

export const createClient = (cookieStore: ReturnType<typeof cookies>) => {
  return createServerClient(
    supabaseUrl!,
    supabaseKey!,
    {
      cookies: {
        getAll: () => cookieStore.getAll(),
        setAll: (cookiesToSet) => {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // Can be ignored for Server Components
          }
        },
      },
    },
  );
};
```

`utils/supabase/client.ts`

```ts
import { createBrowserClient } from "@supabase/ssr";

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

export const createClient = () =>
  createBrowserClient(supabaseUrl!, supabaseKey!);
```

`utils/supabase/middleware.ts`

```ts
import { createServerClient } from "@supabase/ssr";
import { type NextRequest, NextResponse } from "next/server";

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

export const createClient = (request: NextRequest) => {
  let supabaseResponse = NextResponse.next({ request: { headers: request.headers } });

  const supabase = createServerClient(
    supabaseUrl!,
    supabaseKey!,
    {
      cookies: {
        getAll: () => request.cookies.getAll(),
        setAll: (cookiesToSet) => {
          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value));
          supabaseResponse = NextResponse.next({ request });
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          );
        },
      },
    },
  );

  return supabaseResponse;
};
```

---

#### What I want from you

- Review this setup carefully.
- Find bugs or missing pieces.
- Suggest and apply changes directly in code.
- Ensure the Supabase integration works smoothly in Replit (auth, cookies, migrations, SSR/CSR).
- Provide explanations so I understand why the fixes are needed.

Don't start working. Please review and tell me what we're missing